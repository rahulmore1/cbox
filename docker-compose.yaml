# Unified Docker compose file 
version: "3.8"
services:
  db:
    build:
      context: ./SQL
      dockerfile: Dockerfile
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sql1
    hostname: sql1
    ports: 
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql/data
      - mssql_log:/var/opt/mssql/log
      - mssql_backup:/var/opt/mssql/backup
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=12345Abc%
      - MSSQL_DATA_DIR=/var/opt/mssql/data
      - MSSQL_LOG_DIR=/var/opt/mssql/log
      - MSSQL_BACKUP_DIR=/var/opt/mssql/backup
    networks:
      - codebloxnet

  zookeeper:
    build:
      context: ./Kafka/zookeeper
      dockerfile: Dockerfile
    image: codeblox/zookeeper:2.7.0
    container_name: zookeeper
    hostname: zookeeper
    ports: 
      - "2181:2181"
    volumes:
      - ./Kafka/config/zookeeper.properties:/kafka/config/zookeeper.properties
      - zookeeper_data:/tmp/zookeeper/
    networks:
      - codebloxnet
  
  kafka:
    build:
      context: ./Kafka/kafka
      dockerfile: Dockerfile
    image: codeblox/kafka:2.7.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - ./Kafka/config/kafka.properties:/kafka/config/server.properties
      - kafka_data:/tmp/kafka-logs/
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
    - codebloxnet
    depends_on:
      - "zookeeper"

  mongo:
    container_name: mongo
    image: mongo
    hostname: mongo
    ports:
      - "27017:27017"
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - mongo:/data/db
      - mongo:/data/configdb
    networks:
      - codebloxnet
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_URL: mongodb://root:admin@mongo:27017/
    networks:
      - codebloxnet
    depends_on:
      - "mongo"

  webappui:
    image: <>
    container_name: codebloxwebui2
    hostname: codebloxwebui2
    ports: 
      - "80:80"
    volumes:
      - codebloxwebui2: /share
    networks:
      - codebloxnet
  
  webapi:
      image: <>
      container_name: codebloxapi
      hostname: codebloxapi
      ports: 
        - "5055:5055"
      volumes:
        - codebloxapi: /share
      environment:
        - ASPNETCORE_ENVIRONMENT=Staging
      networks:
        - codebloxnet

  codebloxrulesworker:
      image: <>
      container_name: codebloxrulesworker
      hostname: codebloxrulesworker
      environment:
        - CODEBLOX_ENV=Staging
      networks:
        - codebloxnet

  codebloxtimeworker:
      image: <>
      container_name: codebloxtimeworker
      hostname: codebloxtimeworker
      environment:
        - CODEBLOX_ENV=Staging
      networks:
        - codebloxnet  

volumes:
  mssql_data:
  mssql_log:
  mssql_backup:
  zookeeper_data:
  kafka_data:
  mongo:
  codebloxwebui2:
  codebloxapi:

networks:
  codebloxnet: